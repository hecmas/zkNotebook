import { PrimeField } from "../primeField";
import { ExtensionField } from "../extensionField";

export const x = -15132376222941642752n;
export const ate_loop_count = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    1, 0, 1, 1
]; // This is |x| in base {0,1}
export const x_plus_one_abs = 15132376222941642753n; // |x| + 1
export const x_plus_one_div_three_abs = 5044125407647214251n; // (|x| + 1)/3
export const x_sq_div_three = 76329603384216526021617858986798044501n; // (x^2 - 1) / 3
export const p = 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787n; // (x-1)^2*(x^4-x^2+1)/3 + x
export const r = 52435875175126190479447740508185965837690552500527637822603658699938581184513n; // x^4-x^2+1

// This is (p^12 - 1) / r
export const exponent = 322277361516934140462891564586510139908379969514828494218366688025288661041104682794998680497580008899973249814104447692778988208376779573819485263026159588510513834876303014016798809919343532899164848730280942609956670917565618115867287399623286813270357901731510188149934363360381614501334086825442271920079363289954510565375378443704372994881406797882676971082200626541916413184642520269678897559532260949334760604962086348898118982248842634379637598665468817769075878555493752214492790122785850202957575200176084204422751485957336465472324810982833638490904279282696134323072515220044451592646885410572234451732790590013479358343841220074174848221722017083597872017638514103174122784843925578370430843522959600095676285723737049438346544753168912974976791528535276317256904336520179281145394686565050419250614107803233314658825463117900250701199181529205942363159325765991819433914303908860460720581408201373164047773794825411011922305820065611121544561808414055302212057471395719432072209245600258134364584636810093520285711072578721435517884103526483832733289802426157301542744476740008494780363354305116978805620671467071400711358839553375340724899735460480144599782014906586543813292157922220645089192130209334926661588737007768565838519456601560804957985667880395221049249803753582637708560n;
export const beta = -1n; // quadratic non-residue in Fp
export const xi = [1n, 1n]; // quadratic and cubic non-residue in Fp2

// This is the the order-3 element of Fp used in the G1 subgroup check
export const gamma = 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n;
export const wsq = [[0n],[0n],[1n],[0n],[0n],[0n],[0n]];
export const wcu = [[0n],[0n],[0n],[1n],[0n],[0n],[0n]];
// This is 1/ω²
export const wsq_inv = [[0n],[0n],[0n],[0n],[
    2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279894n,
    2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279893n,
],[0n]];
// This is 1/ω³
export const wcu_inv = [[0n],[0n],[0n],[
    2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279894n,
    2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279893n,
],[0n],[0n]];

// I have used the following function to generate all the Frobenius constants gammaij
// It assumes p satisfies p === 1 (mod 6)
function Frobenius_constants(): void {
    const Fp = new PrimeField(p);
    const Fp2 = new ExtensionField(Fp, [Fp.neg(beta), 0n, 1n]);

    const e1 = (p - 1n) / 6n;
    const e2 = (p ** 2n - 1n) / 6n;

    for (let i = 1n; i < 6n; i++) {
        console.log(`gamma${1}${i} =`,Fp2.exp(xi, i * e1));
    }
    for (let i = 1n; i < 6n; i++) {
        console.log(`gamma${2}${i} =`,Fp2.exp(xi, i * e2));
    }
}

// Frobenius endomorphism constants
export const gamma11 = [
    3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760n,
    151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027n,
];
export const gamma12 = [
    0n,
    4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n,
];
export const gamma13 = [
    1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257n,
    1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257n,
];
export const gamma14 = [
    4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437n,
];
export const gamma15 = [
    877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230n,
    3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557n,
];
export const gamma21 = [
    793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351n,
];
export const gamma22 = [
    793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n,
];
export const gamma23 = [
    4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786n,
];
export const gamma24 = [
    4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n,
];
export const gamma25 = [
    4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437n,
];

// Test vector from https://www.ietf.org/archive/id/draft-irtf-cfrg-pairing-friendly-curves-11.html#appendix-B-9
export const test_pairing = [
    [
        2675223149320665921521646202693247640790817874364255298732398972560239127864099887300921329285059103920214926247256n,
        3268798540077874559188095304926415053902298079662269128631117894259354335713488241073281881110999874366368799440511n,
    ],
    [
        296397698419227591881949966489408966385204245298227609919201225879400018157857419730816679383241778672627140748220n,
        1313697571675342986569886099636226306168713170654435514582366343380736958596157600562325204551377354604385651577455n,
    ],
    [
        1437178847597838002205538891928304392505606959215308674013885606166925907773842499174371404735625830937323828692626n,
        3520140447471844017044610248175793726488927385800919015247604269617056365166670232096113218155158979455637700602719n,
    ],
    [
        2213584337862344967755109385575965635901738814384224456257761298779336140589044234514789656471272705700109501099024n,
        2447141669618865772796042211991982778148438817099153092725275403399894819927527860344663177024354496855213527711198n,
    ],
    [
        1506178926806320088529997600140680210913802140271006315226533143967895395199677036726919792764738011159067846598728n,
        2626389147790168154036854297373352480470342009417426750876875476996308393122833154115295241935326582225976246741447n,
    ],
    [
        2549209626480291013679779981989983528616421847439035724344204595297044667359758911489614886787335613326952862534008n,
        3129088482270901242825355060993467433985308559466438813154852238956177342064351887308381291879994227300431734160957n,
    ],
];

if (require.main === module) {
    Frobenius_constants();
}